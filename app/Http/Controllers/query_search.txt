    
    public function search_query(Request $request)
    {
        $building = MasterFacility::select('type as building')
        ->distinct()
        ->orderBy('type', 'asc')
        ->get();

        $startDate = date('d/m/Y', strtotime($request->bookStartDate));
        $endDate = date('d/m/Y', strtotime($request->bookEndDate));

        $oriStart = date('Y-m-d', strtotime($request->bookStartDate)).' '.$request->bookStartHour.':'.$request->bookStartMinute;
        $oriEnd = date('Y-m-d', strtotime($request->bookEndDate)).' '.$request->bookEndHour.':'.$request->bookEndMinute;

        // echo $oriStart.' '.$oriEnd;die();
        if($oriEnd <= $oriStart){
            return redirect()->back()->with('warning', "End date can't be before Start date");
        }

        $request->bookDate = $startDate.' . '.$request->bookStartHour.':'.$request->bookStartMinute.' - '.$endDate.' . '.$request->bookEndHour.':'.$request->bookEndMinute;

        // echo $request->bookDate;die();

        $callback = $this->search_room($request);

        // print("<pre>".print_r($callback['dataMasterConfig'],true)."</​pre>");

        $viewData = $this->loadViewData();
        if (session('userName')) {
            $data=[
                'userName' => $viewData['userName'],
                'userEmail' => $viewData['userEmail'],
                'dataMasterFacilities' => $callback['dataMasterFacility'],
                'building' => $building,
                'dataMasterConfigs' => $callback['dataMasterConfig'],
                'beginDate' => $callback['beginDate'],
                'endDate' => $callback['endDate'],
            ];
        }

        // print("<pre>".print_r($building,true)."</​pre>");die();
        // session()->flashInput($request->input());
        $request->flash();
        return view('masterFacility.search', $data);
    }

    public function search_room($request)
    {

        $bookDate = $request->bookDate;
        // echo $request->building;;die();
        $bD = explode('-', $bookDate);

        $bstart = explode('.', $bD[0]);
        $bend = explode('.', $bD[1]);

        $bs = str_replace("/", '-', $bstart[0]);
        $bookStart = date('Y-m-d H:i',strtotime($bs.' '.$bstart[1]));

        $be = str_replace("/", '-', $bend[0]);
        $bookEnd = date('Y-m-d H:i',strtotime($be.' '.$bend[1]));

        // echo $bookStart.'<br>'.$bookEnd;die();
        // $bookTime = $request->bookTime;
        // $bookDuration = $request->bookDuration;
        // $d    = new \DateTime($bookDate);
        // $dayName = strtolower($d->format('l'));
        $dayName = '';
        $no = 0;
        $from_date = new \DateTime($bookStart);
        $to_date = new \DateTime($bookEnd);
        // echo $bookStart;die();

        $dayName = [];
        $dayNameIndo = [];
        for ($date = $from_date; $date <= $to_date; $date->modify('+1 day')) {
            $dayName[] = strtolower($date->format('l'));
            $newDate = $date->format('d-m-Y');
            $hari = Carbon::createFromFormat('d-m-Y', $newDate)->locale('id'); 
            $dayNameIndo[] = strtoupper($hari->translatedFormat('l'));
        }

        $monitorClasses  = MonitorClass::whereIn('hari', $dayNameIndo)
            ->leftJoin('u_master_facility', function($join) {
                $join->on('u_monitor_classes.facilId', '=', 'u_master_facility.facilId');
            })
            ->where('jam','!=',' -')
            ->get(['u_monitor_classes.*','u_master_facility.id as id_facility']);

        $excludeClass = [];
        foreach ($monitorClasses as $key => $monitorClass) {
            // $checker         = 0;
            // $timeExplode = explode("-", $monitorClass->jam);
            $startTime = Carbon::createFromTimeString("$monitorClass->start");
            $endTime = Carbon::createFromTimeString("$monitorClass->end");

            // echo $startTime.' > '.$bookStart.'<br>';

            // echo $endTime.' < '.$bookEnd;die();
            if($startTime > $bookStart && $endTime < $bookEnd){
                if(!empty($monitorClass->id_facility)){
                    $excludeClass[$key] = $monitorClass->id_facility;
                }
            }
        }
        // print_r($excludeClass);die();

        $dataMasterConfig = MasterConfig::all()->keyBy('configName');

        $exclude = [];
        if (!is_null($bookDate)) {
            // $dataBooking = UserBooking::when($bookEnd, function ($query, $bookEnd) {
            //     return $query->where('bookEnd','>=', $bookEnd);
            // }, function ($query) {
            //     return $query;
            // })
            // ->whereIn('approvalStatus', ['accept','pending'])
            // ->select('masterFacilityId','DB::raw('CASE WHEN Sales >= 1000 THEN 'Good Day' WHEN Sales >= 500 THEN 'OK Day' ELSE 'Bad Day' END')')
            // ->distinct()
            // ->get();
            // $exclude = $dataBooking->pluck('masterFacilityId')->all();
            $dataBooking = DB::select("
                select masterFacilityId,
                    sum(
                    CASE WHEN bookStart between '".$bookStart."' and '".$bookEnd."' THEN 1
                    WHEN bookEnd between '".$bookStart."' and '".$bookEnd."' THEN 1
                    WHEN bookStart <= '".$bookStart."' and bookEnd >= '".$bookEnd."' THEN 1
                    ELSE 0 END
                    ) as jml
                from user_bookings where bookEnd >= '".$bookStart."' and user_bookings.approvalStatus in ('pending','accept')
                group by masterFacilityId
            ");
            foreach ($dataBooking as $key => $value) {
                if($value->jml>0){
                    $exclude[$key] = $value->masterFacilityId;
                }
            }
        }

        $exclude = array_unique(array_merge($exclude,$excludeClass), SORT_REGULAR);
        // print_r($excludeClass);die();

        $availability = $request->availability;
        $building = $request->building;
        $capacity = (int)$request->capacity;
        $cap['capacity'] = $capacity;
        $cap['facilityCapacity'] = $dataMasterConfig->get('facilityCapacity');

        DB::enableQueryLog();
        $dataMasterFacility = MasterFacility::when($availability, function ($query, $availability) {
            return $query->where('status', $availability);
        }, function ($query) {
            return $query;
        })
        ->when($building, function ($query, $building) {
            return $query->where('type', $building);
        }, function ($query) {
            return $query;
        })
        ->when($cap, function ($query, $cap) {
            $capacity = $cap['capacity'];
            return $query->whereRaw('FLOOR(capacity*'.$cap['facilityCapacity']->configValue.'/100) >= '.$capacity);
        }, function ($query) {
            return $query;
        })
        ->whereNotIn('id', $exclude)
        ->whereNotIn('days' , ['null', 'NULL'])
        // ->where('days', 'LIKE', '%'.$dayName.'%')
        // ->whereIn('days', $dayName)
        ->when($dayName, function ($query, $dayName) {
            foreach ($dayName as $v) {
                $query->where('days', 'LIKE', '%'.$v.'%');
            }
            return $query;
        }, function ($query){
            return $query;
        })
        ->get();
        dd(DB::getQueryLog());
        print_r($dataMasterFacility);die();

        $activeTerm = $dataMasterConfig->get('activeTerm');
        if(!is_null($activeTerm)){
            if(!empty($activeTerm)){
                $beginDate = '';
                $endDate = '';
            }else{
                $activeTerm = $activeTerm->configValue;
                $dataMasterPeriod = MasterPeriod::select('term', \DB::raw('min(beginDate) as beginDate'), \DB::raw('max(endDate) as endDate'))
                            ->where('term', $activeTerm)
                            ->groupBy('term')
                            ->first();
                $beginDate = $dataMasterPeriod->beginDate;
                $endDate = $dataMasterPeriod->endDate;
            }
        }else{
            $beginDate = '';
            $endDate = '';
        }

        $data['dataMasterFacility'] = $dataMasterFacility;
        $data['dataMasterConfig'] = $dataMasterConfig;
        $data['beginDate'] = $beginDate;
        $data['endDate'] = $endDate;

        // print("<pre>".print_r($dataMasterConfig,true)."</​pre>");die();
        return $data;
    }
